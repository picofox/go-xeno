// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.5
// source: strmtest.proto

package strmtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamTest_ServerStream_FullMethodName = "/StreamTest/ServerStream"
	StreamTest_ClientStream_FullMethodName = "/StreamTest/ClientStream"
	StreamTest_DualStream_FullMethodName   = "/StreamTest/DualStream"
)

// StreamTestClient is the client API for StreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamTestClient interface {
	ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamTest_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_ClientStreamClient, error)
	DualStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_DualStreamClient, error)
}

type streamTestClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTestClient(cc grpc.ClientConnInterface) StreamTestClient {
	return &streamTestClient{cc}
}

func (c *streamTestClient) ServerStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamTest_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[0], StreamTest_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTest_ServerStreamClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamTestServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamTestServerStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamTestClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[1], StreamTest_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestClientStreamClient{stream}
	return x, nil
}

type StreamTest_ClientStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamReply, error)
	grpc.ClientStream
}

type streamTestClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamTestClientStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTestClientStreamClient) CloseAndRecv() (*StreamReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamTestClient) DualStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_DualStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamTest_ServiceDesc.Streams[2], StreamTest_DualStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestDualStreamClient{stream}
	return x, nil
}

type StreamTest_DualStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type streamTestDualStreamClient struct {
	grpc.ClientStream
}

func (x *streamTestDualStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTestDualStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTestServer is the server API for StreamTest service.
// All implementations must embed UnimplementedStreamTestServer
// for forward compatibility
type StreamTestServer interface {
	ServerStream(*StreamRequest, StreamTest_ServerStreamServer) error
	ClientStream(StreamTest_ClientStreamServer) error
	DualStream(StreamTest_DualStreamServer) error
	mustEmbedUnimplementedStreamTestServer()
}

// UnimplementedStreamTestServer must be embedded to have forward compatible implementations.
type UnimplementedStreamTestServer struct {
}

func (UnimplementedStreamTestServer) ServerStream(*StreamRequest, StreamTest_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedStreamTestServer) ClientStream(StreamTest_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamTestServer) DualStream(StreamTest_DualStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DualStream not implemented")
}
func (UnimplementedStreamTestServer) mustEmbedUnimplementedStreamTestServer() {}

// UnsafeStreamTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamTestServer will
// result in compilation errors.
type UnsafeStreamTestServer interface {
	mustEmbedUnimplementedStreamTestServer()
}

func RegisterStreamTestServer(s grpc.ServiceRegistrar, srv StreamTestServer) {
	s.RegisterService(&StreamTest_ServiceDesc, srv)
}

func _StreamTest_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTestServer).ServerStream(m, &streamTestServerStreamServer{stream})
}

type StreamTest_ServerStreamServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type streamTestServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamTestServerStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamTest_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTestServer).ClientStream(&streamTestClientStreamServer{stream})
}

type StreamTest_ClientStreamServer interface {
	SendAndClose(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamTestClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamTestClientStreamServer) SendAndClose(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTestClientStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamTest_DualStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTestServer).DualStream(&streamTestDualStreamServer{stream})
}

type StreamTest_DualStreamServer interface {
	Send(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamTestDualStreamServer struct {
	grpc.ServerStream
}

func (x *streamTestDualStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTestDualStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTest_ServiceDesc is the grpc.ServiceDesc for StreamTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamTest",
	HandlerType: (*StreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _StreamTest_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _StreamTest_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DualStream",
			Handler:       _StreamTest_DualStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strmtest.proto",
}
